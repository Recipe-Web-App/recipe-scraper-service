openapi: 3.1.0
info:
  title: Recipe Scraper Service
  summary: High-performance recipe scraping microservice
  description: A modern, secure API for scraping and managing recipe data with comprehensive
    monitoring. This service provides endpoints for recipe scraping, nutritional analysis,
    ingredient substitutions, recipe recommendations, and shopping information.
  contact:
    name: Recipe Scraper Team
    url: https://github.com/jsamuelsen11/recipe-scraper-service
    email: jsamuelsen11@gmail.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 2.0.0
servers:
- url: http://localhost:8000
  description: Development server
- url: https://api.recipe-scraper.example.com
  description: Production server
paths:
  /:
    get:
      tags:
      - Root
      summary: Root endpoint
      description: Root endpoint providing basic service information and health status.
      operationId: root
      responses:
        '200':
          description: Service information
          content:
            application/json:
              schema:
                type: object
                properties:
                  service:
                    type: string
                    example: Recipe Scraper Service
                  version:
                    type: string
                    example: 2.0.0
                  status:
                    type: string
                    example: operational
                  docs:
                    type: string
                    example: /docs
                  health:
                    type: string
                    example: /api/v1/health
  /metrics:
    get:
      tags:
      - Monitoring
      summary: Prometheus metrics
      description: Endpoint that serves Prometheus metrics for monitoring and observability.
      operationId: metrics
      responses:
        '200':
          description: Prometheus metrics in text format
          content:
            text/plain:
              schema:
                type: string
              example: '# HELP http_requests_total Total number of HTTP requests

                # TYPE http_requests_total counter

                http_requests_total{method="GET",endpoint="/api/health"} 42'
  /api/liveness:
    get:
      tags:
      - Health
      summary: Liveness probe
      description: Basic liveness check for Kubernetes/container orchestration. Returns
        200 OK if the service is running.
      operationId: liveness_probe
      responses:
        '200':
          description: Service is alive
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: alive
                  timestamp:
                    type: string
                    format: date-time
                    example: '2025-01-31T12:00:00Z'
                  service:
                    type: string
                    example: recipe-scraper-service
  /api/readiness:
    get:
      tags:
      - Health
      summary: Readiness probe
      description: Readiness check including database and external dependencies. Used
        by Kubernetes for readiness probes.
      operationId: readiness_probe
      responses:
        '200':
          description: Service is ready or degraded but operational
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                    - ready
                    - degraded
                    example: ready
                  timestamp:
                    type: string
                    format: date-time
                    example: '2025-01-31T12:00:00Z'
                  checks:
                    type: object
                    properties:
                      database:
                        type: object
                        properties:
                          status:
                            type: string
                            enum:
                            - healthy
                            - degraded
                          response_time_ms:
                            type: number
                          message:
                            type: string
                  message:
                    type: string
                    example: Service ready
  /api/health:
    get:
      tags:
      - Health
      summary: Comprehensive health check
      description: Detailed health status including all dependencies and metrics.
        Provides comprehensive information about service health, database connectivity,
        external APIs, and performance metrics.
      operationId: health_check
      responses:
        '200':
          description: Service is healthy or degraded but operational
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResponse'
        '503':
          description: Service is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResponse'
  /api/recipe-scraper/health:
    get:
      tags:
      - Health
      summary: Legacy health check (deprecated)
      description: Legacy health check endpoint for backwards compatibility. Use /api/health
        instead.
      operationId: legacy_health_check
      deprecated: true
      responses:
        '200':
          description: Basic health status
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
  /api/recipe-scraper/create-recipe:
    post:
      tags:
      - Recipes
      summary: Create a recipe from a URL
      description: Scrapes recipe data from a provided URL and stores it in the database.
        This endpoint supports most popular recipe websites and will extract recipe
        title, description, ingredients list with quantities and units, cooking instructions,
        nutritional information (when available), and images/metadata.
      operationId: create_recipe
      security:
      - BearerAuth: []
      - OAuth2:
        - write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRecipeRequest'
            examples:
              allrecipes_example:
                summary: AllRecipes URL
                value:
                  recipeUrl: https://www.allrecipes.com/recipe/10813/best-chocolate-chip-cookies/
              food_network_example:
                summary: Food Network URL
                value:
                  recipeUrl: https://www.foodnetwork.com/recipes/alton-brown/chocolate-chip-cookies-recipe-1947703
      responses:
        '200':
          description: Recipe successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRecipeResponse'
              examples:
                success_example:
                  summary: Successful recipe creation
                  value:
                    recipe:
                      recipeId: 123
                      title: Classic Chocolate Chip Cookies
                      description: Soft and chewy chocolate chip cookies that are
                        perfect for any occasion
                      originUrl: https://www.allrecipes.com/recipe/10813/best-chocolate-chip-cookies/
                      servings: 24
                      preparationTime: 15
                      cookingTime: 12
                      difficulty: easy
                      ingredients:
                      - ingredientId: 1
                        name: all-purpose flour
                        quantity:
                          amount: 2.25
                          measurement: CUP
                      - ingredientId: 2
                        name: butter
                        quantity:
                          amount: 1.0
                          measurement: CUP
                      steps:
                      - stepNumber: 1
                        instruction: "Preheat oven to 375\xB0F (190\xB0C)."
                        optional: false
                      - stepNumber: 2
                        instruction: Mix flour and baking soda in a bowl.
                        optional: false
        '400':
          description: Invalid URL or unsupported website
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_url:
                  summary: Invalid recipe URL
                  value:
                    detail: Unable to scrape recipe from the provided URL
                    error_code: INVALID_RECIPE_URL
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          $ref: '#/components/responses/ValidationError'
  /api/recipe-scraper/popular-recipes:
    get:
      tags:
      - Recipes
      summary: Get popular recipes from the internet
      description: Retrieves a curated list of popular recipe URLs from various cooking
        websites. This endpoint aggregates trending and popular recipes from major
        cooking platforms and returns them in a paginated format. The service maintains
        a cache of popular recipes that is updated periodically to ensure fresh content
        while maintaining good performance.
      operationId: get_popular_recipes
      parameters:
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          minimum: 1
          maximum: 100
          default: 50
        description: Number of recipes to return (1-100)
      - name: offset
        in: query
        required: false
        schema:
          type: integer
          minimum: 0
          default: 0
        description: Number of recipes to skip for pagination
      - name: count_only
        in: query
        required: false
        schema:
          type: boolean
          default: false
        description: Return only the total count instead of recipe data
      responses:
        '200':
          description: Popular recipes retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PopularRecipesResponse'
              examples:
                popular_recipes:
                  summary: List of popular recipes
                  value:
                    recipes:
                    - recipeName: Simple Macaroni and Cheese
                      url: https://www.allrecipes.com/recipe/231506/simple-macaroni-and-cheese/
                    - recipeName: Baked Macaroni and Cheese
                      url: https://www.foodnetwork.com/recipes/alton-brown/baked-macaroni-and-cheese-recipe-1939524
                    limit: 50
                    offset: 0
                    count: 150
        '422':
          $ref: '#/components/responses/ValidationError'
  /api/recipe-scraper/recipes/{recipe_id}/nutritional-info:
    get:
      tags:
      - Recipes
      - Nutritional Info
      summary: Get nutritional info for a recipe
      description: Returns comprehensive nutritional information for all ingredients
        in the recipe, with options to include total aggregated values and per-ingredient
        breakdowns.
      operationId: get_recipe_nutritional_info
      parameters:
      - name: recipe_id
        in: path
        required: true
        schema:
          type: integer
          minimum: 1
        description: The ID of the recipe (must be > 0)
      - name: include_total
        in: query
        required: false
        schema:
          type: boolean
          default: true
        description: Include total aggregated nutritional information
      - name: include_ingredients
        in: query
        required: false
        schema:
          type: boolean
          default: false
        description: Include per-ingredient nutritional breakdowns
      responses:
        '200':
          description: Nutritional information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipeNutritionalInfoResponse'
        '206':
          description: Partial content - some ingredient nutritional data unavailable
          headers:
            X-Partial-Content:
              schema:
                type: string
                example: 'true'
              description: Indicates partial content response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipeNutritionalInfoResponse'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missing_flags:
                  summary: Missing required flags
                  value:
                    detail: At least one of 'include_total' or 'include_ingredients'
                      must be true.
        '404':
          $ref: '#/components/responses/NotFoundError'
        '422':
          $ref: '#/components/responses/ValidationError'
  /api/recipe-scraper/ingredients/{ingredient_id}/nutritional-info:
    get:
      tags:
      - Ingredients
      - Nutritional Info
      summary: Get nutritional info for an ingredient
      description: Returns comprehensive nutritional information for a specific ingredient,
        with optional quantity adjustment for custom serving sizes.
      operationId: get_ingredient_nutritional_info
      parameters:
      - name: ingredient_id
        in: path
        required: true
        schema:
          type: integer
          minimum: 1
        description: The ID of the ingredient (must be > 0)
      - name: amount
        in: query
        required: false
        schema:
          type: number
          minimum: 0
          exclusiveMinimum: true
        description: Quantity amount for the ingredient
      - name: measurement
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/IngredientUnitEnum'
        description: Measurement unit for the quantity
      responses:
        '200':
          description: Ingredient nutritional information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngredientNutritionalInfoResponse'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                incomplete_quantity:
                  summary: Incomplete quantity specification
                  value:
                    detail: Both 'amount' and 'measurement' must be provided together
                      when used.
        '404':
          $ref: '#/components/responses/NotFoundError'
        '422':
          $ref: '#/components/responses/ValidationError'
  /api/recipe-scraper/ingredients/{ingredient_id}/recommended-substitutions:
    get:
      tags:
      - Ingredients
      - Recommendations
      summary: Get substitutions for ingredient
      description: Returns AI-powered recommended substitutions for a given ingredient,
        with conversion ratios and quantity adjustments.
      operationId: get_ingredient_substitutions
      parameters:
      - name: ingredient_id
        in: path
        required: true
        schema:
          type: integer
          minimum: 1
        description: The ID of the ingredient (must be > 0)
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          minimum: 1
          maximum: 100
          default: 50
        description: Number of substitutions to return (1-100)
      - name: offset
        in: query
        required: false
        schema:
          type: integer
          minimum: 0
          default: 0
        description: Number of substitutions to skip for pagination
      - name: count_only
        in: query
        required: false
        schema:
          type: boolean
          default: false
        description: Return only the total count instead of substitution data
      - name: amount
        in: query
        required: false
        schema:
          type: number
          minimum: 0
          exclusiveMinimum: true
        description: Quantity amount for conversion calculations
      - name: measurement
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/IngredientUnitEnum'
        description: Measurement unit for quantity
      responses:
        '200':
          description: Ingredient substitutions retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecommendedSubstitutionsResponse'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                incomplete_quantity:
                  summary: Incomplete quantity specification
                  value:
                    detail: Both amount and measurement must be provided together.
        '404':
          $ref: '#/components/responses/NotFoundError'
        '422':
          $ref: '#/components/responses/ValidationError'
  /api/recipe-scraper/recipes/{recipe_id}/pairing-suggestions:
    get:
      tags:
      - Recipes
      - Recommendations
      summary: Get recipe pairing suggestions
      description: Recommends recipes that pair well with the given recipe, using
        AI-powered analysis of flavor profiles and cuisine types.
      operationId: get_recipe_pairings
      parameters:
      - name: recipe_id
        in: path
        required: true
        schema:
          type: integer
          minimum: 1
        description: The ID of the recipe (must be > 0)
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          minimum: 1
          maximum: 100
          default: 50
        description: Number of pairing suggestions to return (1-100)
      - name: offset
        in: query
        required: false
        schema:
          type: integer
          minimum: 0
          default: 0
        description: Number of suggestions to skip for pagination
      - name: count_only
        in: query
        required: false
        schema:
          type: boolean
          default: false
        description: Return only the total count instead of pairing data
      responses:
        '200':
          description: Recipe pairing suggestions retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PairingSuggestionsResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '422':
          $ref: '#/components/responses/ValidationError'
  /api/recipe-scraper/ingredients/{ingredient_id}/shopping-info:
    get:
      tags:
      - Shopping
      - Ingredients
      summary: Get shopping information for an ingredient
      description: Retrieves shopping information for a specific ingredient, including
        estimated prices, availability, and quantity conversions for grocery shopping.
      operationId: get_ingredient_shopping_info
      parameters:
      - name: ingredient_id
        in: path
        required: true
        schema:
          type: integer
          minimum: 1
        description: The unique identifier of the ingredient
      - name: amount
        in: query
        required: false
        schema:
          type: number
          minimum: 0
          exclusiveMinimum: true
        description: Quantity amount for price calculation
      - name: measurement
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/IngredientUnitEnum'
        description: Measurement unit for the quantity
      responses:
        '200':
          description: Shopping information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngredientShoppingInfoResponse'
              examples:
                flour_example:
                  summary: Flour shopping info
                  value:
                    ingredientName: all-purpose flour
                    quantity:
                      amount: 2.5
                      measurement: CUP
                    estimatedPrice: '1.25'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                incomplete_quantity:
                  summary: Incomplete quantity specification
                  value:
                    detail: Both 'amount' and 'measurement' must be provided together
                      when used.
        '404':
          $ref: '#/components/responses/NotFoundError'
        '422':
          $ref: '#/components/responses/ValidationError'
  /api/recipe-scraper/recipes/{recipe_id}/shopping-info:
    get:
      tags:
      - Shopping
      - Recipes
      summary: Get shopping information for a complete recipe
      description: Retrieves comprehensive shopping information for all ingredients
        in a recipe, including individual ingredient prices and total estimated cost
        for grocery shopping.
      operationId: get_recipe_shopping_info
      parameters:
      - name: recipe_id
        in: path
        required: true
        schema:
          type: integer
          minimum: 1
        description: The unique identifier of the recipe
      responses:
        '200':
          description: Shopping information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipeShoppingInfoResponse'
              examples:
                recipe_shopping:
                  summary: Complete recipe shopping info
                  value:
                    recipeId: 123
                    ingredients:
                      flour:
                        ingredientName: all-purpose flour
                        quantity:
                          amount: 2.5
                          measurement: CUP
                        estimatedPrice: '1.25'
                      sugar:
                        ingredientName: granulated sugar
                        quantity:
                          amount: 1.0
                          measurement: CUP
                        estimatedPrice: '0.75'
                    totalEstimatedCost: '2.00'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '422':
          $ref: '#/components/responses/ValidationError'
  /api/recipe-scraper/admin/clear-cache:
    post:
      tags:
      - Admin
      summary: Clear service cache
      description: Clears the cache for the Recipe Scraper service. This endpoint
        is intended for administrative use only and requires service-to-service authentication.
      operationId: clear_cache
      security:
      - OAuth2:
        - admin
      responses:
        '200':
          description: Cache cleared successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Cache cleared successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
components:
  schemas:
    CreateRecipeRequest:
      type: object
      required:
      - recipeUrl
      properties:
        recipeUrl:
          type: string
          format: uri
          description: The recipe URL to create. Should point to a valid recipe page.
          example: https://www.allrecipes.com/recipe/10813/best-chocolate-chip-cookies/
      description: Request schema for creating a recipe from a URL.
    CreateRecipeResponse:
      type: object
      required:
      - recipe
      properties:
        recipe:
          $ref: '#/components/schemas/Recipe'
      description: Response model returned after a recipe is successfully created.
    Recipe:
      type: object
      required:
      - title
      - ingredients
      - steps
      properties:
        recipeId:
          type: integer
          description: Unique ID of the recipe
          example: 123
        title:
          type: string
          description: Title of the recipe
          example: Classic Chocolate Chip Cookies
        description:
          type: string
          nullable: true
          description: Description of the recipe
          example: Soft and chewy chocolate chip cookies that are perfect for any
            occasion
        originUrl:
          type: string
          format: uri
          nullable: true
          description: Original source URL
          example: https://www.allrecipes.com/recipe/10813/best-chocolate-chip-cookies/
        servings:
          type: number
          nullable: true
          description: Number of servings
          example: 24
        preparationTime:
          type: integer
          nullable: true
          description: Preparation time in minutes
          example: 15
        cookingTime:
          type: integer
          nullable: true
          description: Cooking time in minutes
          example: 12
        difficulty:
          type: string
          nullable: true
          description: Difficulty level
          enum:
          - easy
          - medium
          - hard
          example: easy
        ingredients:
          type: array
          items:
            $ref: '#/components/schemas/Ingredient'
          description: List of ingredients
        steps:
          type: array
          items:
            $ref: '#/components/schemas/RecipeStep'
          description: List of preparation steps
      description: Represents a recipe with all relevant fields.
    Ingredient:
      type: object
      required:
      - ingredientId
      properties:
        ingredientId:
          type: integer
          description: The ID of the ingredient
          example: 1
        name:
          type: string
          nullable: true
          description: Name of the ingredient
          example: all-purpose flour
        quantity:
          $ref: '#/components/schemas/Quantity'
          nullable: true
      description: Common schema for ingredient data.
    Quantity:
      type: object
      required:
      - amount
      properties:
        amount:
          type: number
          minimum: 0
          description: The numeric value of the ingredient quantity
          example: 2.25
        measurement:
          $ref: '#/components/schemas/IngredientUnitEnum'
          default: UNIT
      description: Sub-schema for ingredient quantity.
    RecipeStep:
      type: object
      required:
      - stepNumber
      - instruction
      properties:
        stepNumber:
          type: integer
          description: Step number in the recipe
          example: 1
        instruction:
          type: string
          description: Instruction for this step
          example: "Preheat oven to 375\xB0F (190\xB0C)."
        optional:
          type: boolean
          default: false
          description: Whether this step is optional
        timerSeconds:
          type: integer
          nullable: true
          description: Optional timer in seconds
          example: 720
        createdAt:
          type: string
          format: date-time
          nullable: true
          description: Timestamp when the step was created
      description: Represents a single step in the recipe preparation.
    IngredientUnitEnum:
      type: string
      enum:
      - G
      - KG
      - OZ
      - LB
      - ML
      - L
      - CUP
      - TBSP
      - TSP
      - PIECE
      - CLOVE
      - SLICE
      - PINCH
      - CAN
      - BOTTLE
      - PACKET
      - UNIT
      description: Units of measurement for recipe ingredients.
    PopularRecipesResponse:
      type: object
      required:
      - recipes
      - limit
      - offset
      - count
      properties:
        recipes:
          type: array
          items:
            $ref: '#/components/schemas/WebRecipe'
          description: Paginated recipes list.
        limit:
          type: integer
          description: Max number of recipes returned.
          example: 50
        offset:
          type: integer
          description: Start index of recipes.
          example: 0
        count:
          type: integer
          description: Total number of available recipes.
          example: 150
      description: Response schema representing a list of popular recipes from the
        internet.
    WebRecipe:
      type: object
      required:
      - recipeName
      - url
      properties:
        recipeName:
          type: string
          description: The name of the recipe as found online.
          example: Simple Macaroni and Cheese
        url:
          type: string
          format: uri
          description: The source URL where the recipe is located.
          example: https://www.allrecipes.com/recipe/231506/simple-macaroni-and-cheese/
      description: Schema containing a recipe from the internet.
    RecipeNutritionalInfoResponse:
      type: object
      properties:
        ingredients:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/IngredientNutritionalInfoResponse'
          nullable: true
          description: Nutritional information for each ingredient in the recipe.
        missingIngredients:
          type: array
          items:
            type: integer
          nullable: true
          description: List of ingredient IDs for which nutritional information could
            not be retrieved.
        total:
          $ref: '#/components/schemas/IngredientNutritionalInfoResponse'
          nullable: true
          description: Total aggregated nutritional information for the recipe.
      description: Response schema representing nutritional information for a recipe.
    IngredientNutritionalInfoResponse:
      type: object
      required:
      - quantity
      properties:
        quantity:
          $ref: '#/components/schemas/Quantity'
        classification:
          $ref: '#/components/schemas/IngredientClassification'
        macroNutrients:
          $ref: '#/components/schemas/MacroNutrients'
        vitamins:
          $ref: '#/components/schemas/Vitamins'
        minerals:
          $ref: '#/components/schemas/Minerals'
      description: Contains overall nutritional information for an ingredient.
    IngredientClassification:
      type: object
      properties:
        allergies:
          type: array
          items:
            $ref: '#/components/schemas/AllergenEnum'
          nullable: true
          description: List of allergens associated with the ingredient
        foodGroups:
          type: array
          items:
            $ref: '#/components/schemas/FoodGroupEnum'
          nullable: true
          description: Food groups this ingredient belongs to
        nutriscoreScore:
          type: integer
          minimum: -15
          maximum: 40
          nullable: true
          description: Nutri-Score value (-15 very healthy to +40 unhealthy)
        nutriscoreGrade:
          type: string
          nullable: true
          enum:
          - A
          - B
          - C
          - D
          - E
          description: Nutri-Score letter grade (A-E)
        productName:
          type: string
          nullable: true
          description: Product name from nutritional database
        brands:
          type: string
          nullable: true
          description: Brand information from nutritional database
        categories:
          type: string
          nullable: true
          description: Product categories from nutritional database
      description: Contains meta and classification information for an ingredient.
    AllergenEnum:
      type: string
      enum:
      - MILK
      - EGGS
      - FISH
      - SHELLFISH
      - TREE_NUTS
      - PEANUTS
      - WHEAT
      - SOYBEANS
      - SESAME
      - CELERY
      - MUSTARD
      - LUPIN
      - SULPHITES
      - ALMONDS
      - CASHEWS
      - HAZELNUTS
      - WALNUTS
      - GLUTEN
      - COCONUT
      - CORN
      - YEAST
      - GELATIN
      - KIWI
      - PORK
      - BEEF
      - ALCOHOL
      - SULFUR_DIOXIDE
      - PHENYLALANINE
      - NONE
      - UNKNOWN
      description: Enumeration of common allergens.
    FoodGroupEnum:
      type: string
      enum:
      - VEGETABLES
      - FRUITS
      - GRAINS
      - LEGUMES
      - NUTS_SEEDS
      - MEAT
      - POULTRY
      - SEAFOOD
      - DAIRY
      - BEVERAGES
      - PROCESSED_FOODS
      - UNKNOWN
      description: Food group classifications for nutritional analysis.
    MacroNutrients:
      type: object
      properties:
        calories:
          type: integer
          minimum: 0
          nullable: true
          description: Total calories per serving
          example: 250
        carbsG:
          type: string
          nullable: true
          description: Carbohydrate content in grams
          example: '30.5'
        cholesterolMg:
          type: string
          nullable: true
          description: Cholesterol content in milligrams
          example: '5.2'
        proteinG:
          type: string
          nullable: true
          description: Protein content in grams
          example: '4.1'
        sugars:
          $ref: '#/components/schemas/Sugars'
        fats:
          $ref: '#/components/schemas/Fats'
        fibers:
          $ref: '#/components/schemas/Fibers'
      description: Contains macro-nutrient information for an ingredient.
    Sugars:
      type: object
      properties:
        sugarG:
          type: string
          nullable: true
          description: Sugar content in grams
          example: '12.3'
        addedSugarsG:
          type: string
          nullable: true
          description: Added sugars in grams
          example: '5.1'
      description: Contains sugar information for an ingredient.
    Fats:
      type: object
      properties:
        fatG:
          type: string
          nullable: true
          description: Fat content in grams
          example: '8.2'
        saturatedFatG:
          type: string
          nullable: true
          description: Saturated fat content in grams
          example: '3.1'
        monounsaturatedFatG:
          type: string
          nullable: true
          description: Monounsaturated fat content in grams
          example: '2.8'
        polyunsaturatedFatG:
          type: string
          nullable: true
          description: Polyunsaturated fat content in grams
          example: '1.9'
        omega3FatG:
          type: string
          nullable: true
          description: Omega-3 fat content in grams
          example: '0.5'
        omega6FatG:
          type: string
          nullable: true
          description: Omega-6 fat content in grams
          example: '1.2'
        omega9FatG:
          type: string
          nullable: true
          description: Omega-9 fat content in grams
          example: '2.1'
        transFatG:
          type: string
          nullable: true
          description: Trans fat content in grams
          example: '0.0'
      description: Contains fat information for an ingredient.
    Fibers:
      type: object
      properties:
        fiberG:
          type: string
          nullable: true
          description: Total fiber content in grams
          example: '2.8'
        solubleFiberG:
          type: string
          nullable: true
          description: Soluble fiber in grams
          example: '1.2'
        insolubleFiberG:
          type: string
          nullable: true
          description: Insoluble fiber in grams
          example: '1.6'
      description: Contains fiber information for an ingredient.
    Vitamins:
      type: object
      properties:
        vitaminAMg:
          type: string
          nullable: true
          description: Vitamin A in milligrams
          example: '0.5'
        vitaminB6Mg:
          type: string
          nullable: true
          description: Vitamin B6 in milligrams
          example: '0.1'
        vitaminB12Mg:
          type: string
          nullable: true
          description: Vitamin B12 in milligrams
          example: '0.0'
        vitaminCMg:
          type: string
          nullable: true
          description: Vitamin C in milligrams
          example: '0.2'
        vitaminDMg:
          type: string
          nullable: true
          description: Vitamin D in milligrams
          example: '0.0'
        vitaminEMg:
          type: string
          nullable: true
          description: Vitamin E in milligrams
          example: '0.3'
        vitaminKMg:
          type: string
          nullable: true
          description: Vitamin K in milligrams
          example: '0.1'
      description: Contains vitamin information for an ingredient.
    Minerals:
      type: object
      properties:
        calciumMg:
          type: string
          nullable: true
          description: Calcium in milligrams
          example: '120.5'
        ironMg:
          type: string
          nullable: true
          description: Iron in milligrams
          example: '2.1'
        magnesiumMg:
          type: string
          nullable: true
          description: Magnesium in milligrams
          example: '45.2'
        potassiumMg:
          type: string
          nullable: true
          description: Potassium in milligrams
          example: '180.7'
        sodiumMg:
          type: string
          nullable: true
          description: Sodium in milligrams
          example: '320.1'
        zincMg:
          type: string
          nullable: true
          description: Zinc in milligrams
          example: '1.8'
      description: Contains mineral information for an ingredient.
    RecommendedSubstitutionsResponse:
      type: object
      required:
      - ingredient
      - recommendedSubstitutions
      properties:
        ingredient:
          $ref: '#/components/schemas/Ingredient'
        recommendedSubstitutions:
          type: array
          items:
            $ref: '#/components/schemas/IngredientSubstitution'
          description: List of recommended substitution options.
        limit:
          type: integer
          default: 50
          description: The maximum number of substitutions to return.
        offset:
          type: integer
          default: 0
          description: The starting index for pagination of results.
        count:
          type: integer
          default: 0
          description: The total number of substitution recommendations available.
      description: Response schema representing a list of substitutions for an ingredient.
    IngredientSubstitution:
      type: object
      required:
      - ingredient
      - conversionRatio
      properties:
        ingredient:
          type: string
          description: The name of the suggested substitute ingredient.
          example: whole wheat flour
        quantity:
          $ref: '#/components/schemas/Quantity'
          nullable: true
          description: The amount of the substitute ingredient to use.
        conversionRatio:
          $ref: '#/components/schemas/ConversionRatio'
      description: Represents a single substitution recommendation for an ingredient.
    ConversionRatio:
      type: object
      required:
      - ratio
      - measurement
      properties:
        ratio:
          type: number
          minimum: 0
          description: The numeric conversion ratio from original to substitute.
          example: 0.75
        measurement:
          $ref: '#/components/schemas/IngredientUnitEnum'
      description: Represents the conversion ratio between original and substitute
        ingredients.
    PairingSuggestionsResponse:
      type: object
      required:
      - recipeId
      - pairingSuggestions
      - limit
      - offset
      - count
      properties:
        recipeId:
          type: integer
          description: The ID of the recipe being evaluated for pairing.
          example: 123
        pairingSuggestions:
          type: array
          items:
            $ref: '#/components/schemas/WebRecipe'
          description: A list of recommended pairing recipes.
        limit:
          type: integer
          description: The maximum number of items returned.
          example: 50
        offset:
          type: integer
          description: The offset used for pagination.
          example: 0
        count:
          type: integer
          description: The total number of available suggestions.
          example: 25
      description: Response model for pairing suggestions.
    IngredientShoppingInfoResponse:
      type: object
      required:
      - ingredientName
      - quantity
      properties:
        ingredientName:
          type: string
          description: The name of the ingredient
          example: all-purpose flour
        quantity:
          $ref: '#/components/schemas/Quantity'
        estimatedPrice:
          type: string
          nullable: true
          description: The estimated price of the ingredient (None if unavailable)
          example: '1.25'
      description: Response schema representing shopping information for an ingredient.
    RecipeShoppingInfoResponse:
      type: object
      required:
      - recipeId
      - ingredients
      - totalEstimatedCost
      properties:
        recipeId:
          type: integer
          minimum: 1
          description: The unique identifier of the recipe
          example: 123
        ingredients:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/IngredientShoppingInfoResponse'
          description: Dictionary mapping ingredient names to their shopping information
        totalEstimatedCost:
          type: string
          description: The total estimated cost for all ingredients
          example: '15.75'
      description: Response schema representing shopping information for a recipe.
    HealthCheckResponse:
      type: object
      required:
      - status
      - timestamp
      - version
      - checks
      properties:
        status:
          type: string
          enum:
          - healthy
          - degraded
          - unhealthy
          description: Overall service health status
          example: healthy
        timestamp:
          type: string
          format: date-time
          description: Health check timestamp
          example: '2025-01-31T12:00:00Z'
        version:
          type: string
          description: Service version
          example: 2.0.0
        uptime_seconds:
          type: integer
          description: Service uptime in seconds
          example: 3600
        checks:
          type: object
          properties:
            database:
              $ref: '#/components/schemas/HealthCheckItem'
            cache:
              $ref: '#/components/schemas/HealthCheckItem'
            external_apis:
              type: object
              properties:
                spoonacular:
                  $ref: '#/components/schemas/HealthCheckItem'
        database_monitoring:
          type: object
          description: Database monitoring status
          properties:
            enabled:
              type: boolean
              example: true
            last_check:
              type: string
              format: date-time
              example: '2025-01-31T12:00:00Z'
        response_time_ms:
          type: number
          description: Health check response time in milliseconds
          example: 45.2
      description: Comprehensive health check response schema.
    HealthCheckItem:
      type: object
      required:
      - status
      - message
      properties:
        status:
          type: string
          enum:
          - healthy
          - degraded
          - unhealthy
          description: Component health status
        response_time_ms:
          type: number
          description: Component response time in milliseconds
        message:
          type: string
          description: Status message
      description: Individual health check item schema.
    ErrorResponse:
      type: object
      required:
      - detail
      properties:
        detail:
          type: string
          description: Error message
          example: Resource not found
        error_code:
          type: string
          description: Error code for programmatic handling
          example: NOT_FOUND
        error_type:
          type: string
          description: Error type classification
          example: validation_error
      description: Standard error response schema.
    ValidationError:
      type: object
      required:
      - loc
      - msg
      - type
      properties:
        loc:
          type: array
          items:
            anyOf:
            - type: string
            - type: integer
          description: Location of the validation error
        msg:
          type: string
          description: Validation error message
        type:
          type: string
          description: Validation error type
      description: Pydantic validation error schema.
    HTTPValidationError:
      type: object
      properties:
        detail:
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
      description: HTTP validation error response.
  responses:
    UnauthorizedError:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            missing_token:
              summary: Missing authentication token
              value:
                detail: Authentication required
                error_type: authentication_required
            invalid_token:
              summary: Invalid authentication token
              value:
                detail: Invalid or expired authentication token
                error_type: invalid_token
    ForbiddenError:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            insufficient_permissions:
              summary: Insufficient permissions
              value:
                detail: Insufficient permissions for this operation
                error_type: insufficient_permissions
    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            recipe_not_found:
              summary: Recipe not found
              value:
                detail: Recipe with ID 123 not found
                error_code: RECIPE_NOT_FOUND
            ingredient_not_found:
              summary: Ingredient not found
              value:
                detail: Ingredient with ID 456 not found
                error_code: INGREDIENT_NOT_FOUND
    ValidationError:
      description: Request validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HTTPValidationError'
          examples:
            field_required:
              summary: Required field missing
              value:
                detail:
                - loc:
                  - body
                  - recipeUrl
                  msg: field required
                  type: value_error.missing
            invalid_type:
              summary: Invalid field type
              value:
                detail:
                - loc:
                  - path
                  - recipe_id
                  msg: value is not a valid integer
                  type: type_error.integer
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: OAuth2 JWT Bearer token authentication. Include the token in the
        Authorization header as 'Bearer <token>'.
    OAuth2:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: /oauth/token
          scopes:
            read: Read access to resources - allows viewing recipes, ingredients,
              and nutritional information
            write: Write access to resources - allows creating and modifying recipes
            admin: Administrative access - allows cache management and system operations
      description: OAuth2 authentication with JWT tokens. Obtain a token using client
        credentials flow.
security:
- BearerAuth: []
- OAuth2: []
tags:
- name: Root
  description: Root and basic service endpoints
- name: Health
  description: Health check and monitoring endpoints for service observability
- name: Monitoring
  description: Prometheus metrics and monitoring endpoints
- name: Recipes
  description: Recipe scraping, creation, and management operations
- name: Ingredients
  description: Ingredient-related operations and information retrieval
- name: Nutritional Info
  description: Nutritional information and analysis for recipes and ingredients
- name: Recommendations
  description: AI-powered recommendations for ingredient substitutions and recipe
    pairings
- name: Shopping
  description: Shopping information, pricing, and grocery list generation
- name: Admin
  description: Administrative operations requiring elevated permissions
externalDocs:
  description: Recipe Scraper Service Documentation
  url: https://github.com/jsamuelsen11/recipe-scraper-service
