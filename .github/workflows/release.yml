name: Release and Changelog

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'chore(release):')"

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm install -g \
            conventional-changelog-cli \
            conventional-commits-parser \
            conventional-recommended-bump \
            semver

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.13'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(poetry version -s)
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Determine version bump
        id: version_bump
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            BUMP_TYPE="${{ github.event.inputs.version_type }}"
          else
            # Auto-determine bump type from conventional commits
            BUMP_TYPE=$(conventional-recommended-bump -p angular)
          fi

          NEW_VERSION=$(semver -i $BUMP_TYPE ${{ steps.current_version.outputs.current_version }})
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Check if release needed
        id: check_release
        run: |
          if [ "${{ steps.current_version.outputs.current_version }}" = "${{ steps.version_bump.outputs.new_version }}" ]; then
            echo "needs_release=false" >> $GITHUB_OUTPUT
            echo "No release needed - no conventional commits found"
          else
            echo "needs_release=true" >> $GITHUB_OUTPUT
            echo "Release needed: ${{ steps.current_version.outputs.current_version }} -> ${{ steps.version_bump.outputs.new_version }}"
          fi

      - name: Generate changelog
        if: steps.check_release.outputs.needs_release == 'true'
        run: |
          conventional-changelog -p angular -i CHANGELOG.md -s -r 0

      - name: Update version in pyproject.toml
        if: steps.check_release.outputs.needs_release == 'true'
        run: |
          poetry version ${{ steps.version_bump.outputs.new_version }}

      - name: Commit changes
        if: steps.check_release.outputs.needs_release == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add CHANGELOG.md pyproject.toml
          git commit -m "chore(release): v${{ steps.version_bump.outputs.new_version }}"
          git push

      - name: Create GitHub Release
        if: steps.check_release.outputs.needs_release == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version_bump.outputs.new_version }}
          release_name: Release v${{ steps.version_bump.outputs.new_version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false

      - name: Build and publish to PyPI
        if: steps.check_release.outputs.needs_release == 'true'
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
        run: |
          poetry build
          poetry publish
