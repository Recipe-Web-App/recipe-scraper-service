name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, 'feature/*', 'hotfix/*']
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scans weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

env:
  PYTHON_VERSION: '3.13'
  POETRY_VERSION: '2.1.3'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security and quality checks
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Run Bandit security scan
        run: |
          poetry run bandit -r app/ -f json -o bandit-report.json || true
          poetry run bandit -r app/ -f txt

      - name: Run Safety vulnerability scan
        run: |
          poetry run safety check --json --output safety-report.json || true
          poetry run safety check

      - name: Run Semgrep security scan
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/python
            p/django
            p/flask
            p/fastapi
          generateSarif: "1"

      - name: Upload Semgrep results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif

      - name: Detect secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # Code quality and linting
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Check code formatting with Black
        run: poetry run black --check --diff .

      - name: Check import sorting with isort
        run: poetry run isort --check-only --diff .

      - name: Lint with Ruff
        run: poetry run ruff check . --output-format=github

      - name: Type check with MyPy
        run: poetry run mypy app/

      - name: Check docstrings with pydoclint
        run: poetry run pydoclint app/

      - name: Check code complexity with Radon
        run: |
          poetry run radon cc app/ --min B
          poetry run radon mi app/ --min B

      - name: Spell check
        run: poetry run codespell app/ tests/ docs/ *.md

  # Matrix testing across Python versions
  test:
    name: Test Suite (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11', '3.12', '3.13']

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password  #pragma: allowlist secret
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Set up test environment
        run: |  # pragma: allowlist secret
          cp .env.example .env
          echo "POSTGRES_HOST=localhost" >> .env
          echo "POSTGRES_PORT=5432" >> .env
          echo "POSTGRES_DB=test_db" >> .env
          echo "POSTGRES_SCHEMA=public" >> .env
          echo "RECIPE_SCRAPER_DB_USER=test_user" >> .env
          echo "RECIPE_SCRAPER_DB_PASSWORD=test_password" >> .env
          echo "SPOONACULAR_API_KEY=test_key" >> .env
          echo "REDIS_URL=redis://localhost:6379/0" >> .env

      - name: Run unit tests
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: test_db
          POSTGRES_SCHEMA: public
          RECIPE_SCRAPER_DB_USER: test_user
          RECIPE_SCRAPER_DB_PASSWORD: test_password #pragma: allowlist secret
          SPOONACULAR_API_KEY: test_key #pragma: allowlist secret
          REDIS_URL: redis://localhost:6379/0
        run: |
          poetry run pytest tests/unit/ \
            --cov=app \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --cov-fail-under=80 \
            --junit-xml=test-results.xml \
            -v

      - name: Run integration tests
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: test_db
          POSTGRES_SCHEMA: public
          RECIPE_SCRAPER_DB_USER: test_user
          RECIPE_SCRAPER_DB_PASSWORD: test_password #pragma: allowlist secret
          SPOONACULAR_API_KEY: test_key #pragma: allowlist secret
          REDIS_URL: redis://localhost:6379/0
        run: |
          poetry run pytest tests/component/ \
            --junit-xml=integration-test-results.xml \
            -v

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: matrix.python-version == '3.13'
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            test-results.xml
            integration-test-results.xml
            htmlcov/
          retention-days: 30

  # Performance testing
  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: |
          poetry install --no-interaction

      - name: Run performance benchmarks
        run: |
          poetry run pytest tests/performance/ \
            --benchmark-only \
            --benchmark-json=benchmark-results.json

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark-results.json
          retention-days: 30

  # Container security and build
  container:
    name: Container Build & Security
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality, test]
    if: github.event_name == 'push'

    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Dependency updates
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
          allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC

  # Notification and reporting
  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality, test, container]
    if: always() && (github.event_name == 'push' && github.ref == 'refs/heads/main')

    steps:
      - name: Report Status
        run: |
          echo "Pipeline Status:"
          echo "Security Scan: ${{ needs.security-scan.result }}"
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Container: ${{ needs.container.result }}"
