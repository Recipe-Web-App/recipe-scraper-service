[tool.poetry]
name = "recipe_scraper_service"
version = "0.1.0"
description = "API microservice to handle scraping recipe data from the internet."
authors = ["jsamuelsen <jsamuelsen11@gmail.com>"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/jsamuelsen/recipe-scraper-service"
repository = "https://github.com/jsamuelsen/recipe-scraper-service"
documentation = "https://github.com/jsamuelsen/recipe-scraper-service"
packages = [{ include = "app" }]
include = [".env.example", "README.md", "pyproject.toml", "app/**"]
exclude = ["tests/**", ".env", ".venv", "*.log"]

[tool.poetry.dependencies]
python = "~3.11.0"
fastapi = "^0.115.12"
httpx = ">=0.28.1,<0.29.0"
tenacity = ">=9.1.2,<10.0.0"
beautifulsoup4 = ">=4.13.4,<5.0.0"
recipe-scrapers = ">=15.7.1,<16.0.0"
loguru = ">=0.7.3,<0.8.0"
python-json-logger = ">=3.3.0,<4.0.0"
pydantic = "^2.0"
python-dotenv = ">=1.0.1,<2.0.0"
prometheus-fastapi-instrumentator = ">=7.1.0,<8.0.0"
slowapi = ">=0.1.9,<0.2.0"
secure = ">=1.0.1,<2.0.0"
pydantic-settings = "^2.9.1"
sqlalchemy = "^2.0.41"
psycopg2 = "^2.9.10"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
recipe-scraper-service = "app.main:main"  # Adjust as needed
dev = "scripts.python.run_local:main"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.5"
pytest-asyncio = "^1.0.0"
pytest-cov = "^6.1.1"
pytest-mock = "^3.14.0"
pytest-benchmark = "^5.1.0"
allure-pytest = "^2.14.2"
respx = "^0.22.0"
isort = "^6.0.1"
mypy = "^1.15.0"
unittest-xml-reporting = "^3.2.0"
types-python-dateutil = "^2.9.0.20240316"
types-beautifulsoup4 = "^4.12.0.20240229"
hypothesis = "^6.131.18"
pre-commit = "^4.2.0"
ruff = "^0.12.0"
uvicorn = { extras = ["standard"], version = ">=0.34.2,<0.36.0" }
pydoclint = "^0.6.6"
docformatter = "^1.7.7"
sphinx = "^8.2.3"
sphinx-autodoc-typehints = "^3.2.0"
sphinx-rtd-theme = "^3.0.2"
sphinxcontrib-openapi = "^0.8.4"
black = "^25.1.0"
types-pyyaml = "^6.0.12.20250516"

[tool.black]
line-length = 88
target-version = ["py311"]
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.venv
  | build
  | dist
)/
'''


[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
line_length = 88
force_grid_wrap = 0
use_parentheses = true
known_first_party = ["app", "tests"]

[tool.ruff]
line-length = 88
target-version = "py311"
lint.select = ["ALL"]
lint.ignore = [
    "D203",   # one-blank-line-before-class
    "D213",   # multi-line-summary-second-line
    "FBT001", # boolean positional arguments
    "FBT002", # boolean positional arguments
    "TD003",  # Issue link with TODO statements
    "FIX002", # Allow TODO statements
    "D413",   # Blank line after last pydoc section
    "I001",   # Ignore import order as it is handled by isort & conflicts
    "G004",   # Allow f-strings for logging
]
fix = true

[tool.mypy]
python_version = "3.11"
strict = true
plugins = ["pydantic.mypy"]
mypy_path = "app"
exclude = ["tests/.*"]
show_error_codes = true
warn_unused_configs = true
check_untyped_defs = true
disallow_untyped_defs = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "--strict-markers --tb=short -ra --cov=app --cov-report=term-missing"
testpaths = [
    "tests/unit",
    "tests/component",
    "tests/dependency",
    "tests/performance"
]
markers = [
    "unit: marks unit tests",
    "component: marks component tests",
    "dependency: marks tests requiring external services",
    "performance: marks performance benchmark tests"
]

[tool.coverage.run]
branch = true
source = ["app"]

[tool.coverage.report]
show_missing = true
skip_covered = true
exclude_lines = [
    "pragma: no cover",
    "if __name__ == .__main__.:",
    "def __str__",
    "def __repr__"
]

[tool.docformatter]
in-place = true
recursive = true
wrap-summaries = 88
wrap-descriptions = 88
style = "google"

[tool.darglint]
docstring-style = "google"
strictness = "short"
ignore = [ "DAR003" ]


[tool.pydoclint]
style = "google"
arg-type-hints = "required"                     # Enforce type hints in Args section
check-return-types = true                       # Require return type in docstring
check-yields = true                             # Require docstring for generators
check-raises = true                             # Require docstring for raised exceptions
check-exceptions = true                         # Same as above, but for broader coverage
exclude = ["^__init__\\.py$", "^__pycache__$"]  # Skip boilerplate and cache
ignore-non-public = false                       # Apply checks even to _private functions
check-short-description = true                  # Require one-line summary
check-long-description = true                   # Require longer doc if needed
check-arg-type-hints = false                    # Require type hints to exactly match type declaration
strictness = "high"                             # Enforce all checks
