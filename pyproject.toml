[tool.poetry]
name = "recipe_scraper_service"
version = "0.1.0"
description = "API microservice to handle scraping recipe data from the internet."
authors = ["jsamuelsen11 <jsamuelsen11@gmail.com>"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/jsamuelsen11/recipe-scraper-service"
repository = "https://github.com/jsamuelsen11/recipe-scraper-service"
documentation = "https://github.com/jsamuelsen11/recipe-scraper-service"
packages = [{ include = "app" }]
include = [".env.example", "README.md", "pyproject.toml", "app/**"]
exclude = ["tests/**", ".env", ".venv", "*.log"]

[tool.poetry.dependencies]
python = "~3.13.0"
fastapi = "^0.119.1"
httpx = ">=0.28.1,<0.29.0"
tenacity = ">=9.1.2,<10.0.0"
beautifulsoup4 = ">=4.13.4,<5.0.0"
recipe-scrapers = ">=15.7.1,<16.0.0"
loguru = ">=0.7.3,<0.8.0"
python-json-logger = ">=3.3.0,<5.0.0"
pydantic = "^2.0"
python-dotenv = ">=1.0.1,<2.0.0"
prometheus-fastapi-instrumentator = ">=7.1.0,<8.0.0"
slowapi = ">=0.1.9,<0.2.0"
secure = ">=1.0.1,<2.0.0"
pydantic-settings = "^2.9.1"
sqlalchemy = "^2.0.44"
psycopg2 = "^2.9.11"
asyncpg = "^0.30.0"
redis = "^6.2.0"
uvicorn = { extras = ["standard"], version = "^0.37.0" }
ingredient-parser-nlp = "^2.2.0"
pyjwt = { extras = ["cryptography"], version = "^2.8.0" }
python-multipart = "^0.0.20"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
recipe-scraper-service = "app.main:main"
dev = "scripts.python.run_local:main"
test-unit = "tests.run_unit_tests:main"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.5"
pytest-asyncio = "^1.1.0"
pytest-cov = "^7.0.0"
pytest-mock = "^3.14.0"
pytest-benchmark = "^5.1.0"
allure-pytest = "^2.14.2"
respx = "^0.22.0"
isort = "^7.0.0"
mypy = "^1.15.0"
unittest-xml-reporting = "^3.2.0"
types-python-dateutil = "^2.9.0.20240316"
types-beautifulsoup4 = "^4.12.0.20240229"
hypothesis = "^6.131.18"
pre-commit = "^4.2.0"
docformatter = "^1.7.7"
sphinx = "^8.2.3"
sphinx-autodoc-typehints = "^3.2.0"
sphinx-rtd-theme = "^3.0.2"
sphinxcontrib-openapi = "^0.8.4"
black = "^25.1.0"
types-pyyaml = "^6.0.12.20250516"
types-pyjwt = "^1.7.1"
factory-boy = "^3.3.3"
pytest-postgresql = "^7.0.2"
pytest-xdist = "^3.7.0"
pytest-random-order = "^1.2.0"
bandit = "^1.8.0"
semgrep = "^1.97.0"
mutmut = "^3.2.0"
detect-secrets = "^1.5.0"
codespell = "^2.4.0"
radon = "^6.0.1"
locust = "^2.32.4"
pylint = "^4.0.2"
testcontainers = "^4.13.2"
types-requests = "^2.32.4.20250809"
types-python-jose = "^3.3.0"

[tool.black]
line-length = 88
target-version = ["py313"]
include = '\.pyi?$'
skip-string-normalization = true
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
line_length = 88
force_grid_wrap = 0
use_parentheses = true
known_first_party = ["app", "tests"]

[tool.ruff]
line-length = 88
target-version = "py313"
show-fixes = true
output-format = "grouped"

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # Pyflakes
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "N",      # pep8-naming
    "FBT",    # flake8-boolean-trap
    "TD",     # flake8-todos
    "FIX",    # flake8-fixme
    "G",      # flake8-logging-format
]
ignore = [
    "FBT001", # boolean positional arguments
    "FBT002", # boolean positional arguments
    "TD003",  # Issue link with TODO statements
    "FIX002", # Allow TODO statements
    "G004",   # Allow f-strings for logging
]
per-file-ignores = { "tests/*.py" = ["FBT003", "S101"] }

[tool.mypy]
python_version = "3.13"
strict = true
plugins = ["pydantic.mypy"]
mypy_path = "app"
exclude = ["tests/.*"]
show_error_codes = true
warn_unused_configs = true
check_untyped_defs = true
disallow_untyped_defs = true
warn_return_any = true
warn_unused_ignores = true
no_implicit_optional = true
strict_optional = true
strict_equality = true
extra_checks = true
warn_unreachable = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_incomplete_defs = true
allow_redefinition = false

# External library overrides - ignore missing type stubs
[[tool.mypy.overrides]]
module = ["redis.*", "recipe_scrapers.*"]
ignore_missing_imports = true

# Ignore untyped external library method calls and Redis typing limitations
[[tool.mypy.overrides]]
module = ["app.utils.cache_manager"]
disable_error_code = ["no-untyped-call", "type-arg", "no-any-return", "index"]

[[tool.mypy.overrides]]
module = ["app.services.recipe_scraper_service"]
disable_error_code = ["no-untyped-call"]

[[tool.mypy.overrides]]
module = ["app.api.v1.routes.health"]
disable_error_code = ["no-untyped-call"]

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"                           # Auto-detect async tests
addopts = [
    "--strict-markers",                         # Strict marker validation
    "--tb=short",                              # Shorter traceback format
    "-ra",                                     # Show summary of all test results
    "--cov=app",                               # Coverage for app directory
    "--cov-report=html",                       # HTML coverage report
    "--cov-report=term-missing",               # Show missing lines in terminal
    "--cov-fail-under=80",                     # Fail if coverage below 80%
    "--disable-warnings",                      # Cleaner test output
]
markers = [
    "unit: Unit tests (fast, isolated)",
    "integration: Integration tests (slower, with real dependencies)",
    "slow: Slow tests that take >1 second",
    "api: API endpoint tests",
    "database: Tests requiring database",
    "external: Tests calling external APIs",
]

[tool.coverage.run]
branch = true
source = ["app"]
omit = [
    "app/__init__.py",
    "app/main.py",                              # Entry point, hard to test
    "*/tests/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
show_missing = true
skip_covered = false                            # Show all files for better overview
precision = 2                                  # Show percentage to 2 decimal places
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "raise AssertionError",
    "raise NotImplementedError",
    "class .*\\(.*Protocol.*\\):",
    "@abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"                           # HTML coverage report directory

[tool.docformatter]
in-place = true
recursive = true
wrap-summaries = 88
wrap-descriptions = 88
style = "google"

[tool.darglint]
docstring-style = "google"
strictness = "short"
ignore = [ "DAR003" ]


[tool.pydoclint]
style = "google"
arg-type-hints = "required"                     # Enforce type hints in Args section
check-return-types = true                       # Require return type in docstring
check-yields = true                             # Require docstring for generators
check-raises = true                             # Require docstring for raised exceptions
check-exceptions = true                         # Same as above, but for broader coverage
exclude = ["^__init__\\.py$", "^__pycache__$"]  # Skip boilerplate and cache
ignore-non-public = false                       # Apply checks even to _private functions
check-short-description = true                  # Require one-line summary
check-long-description = true                   # Require longer doc if needed
check-arg-type-hints = false                    # Require type hints to exactly match type declaration
strictness = "high"                             # Enforce all checks
